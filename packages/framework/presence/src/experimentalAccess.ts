/*!
 * Copyright (c) Microsoft Corporation and contributors. All rights reserved.
 * Licensed under the MIT License.
 */

import type {
	ContainerExtensionStore,
	ContainerExtension,
	InboundExtensionMessage,
} from "@fluidframework/container-runtime-definitions/internal";
import { assert } from "@fluidframework/core-utils/internal";
import type { IFluidContainer } from "@fluidframework/fluid-static";
import { isInternalFluidContainer } from "@fluidframework/fluid-static/internal";

import type { ExtensionRuntime, ExtensionRuntimeProperties } from "./internalTypes.js";
import type { Presence } from "./presence.js";
import type { PresenceExtensionInterface } from "./presenceManager.js";
import { createPresenceManager } from "./presenceManager.js";
import type { SignalMessages } from "./protocol.js";

/**
 * Common Presence manager for a container
 */
class ContainerPresenceManager
	implements ContainerExtension<never, ExtensionRuntimeProperties>
{
	public readonly interface: Presence;
	public readonly extension = this;
	private readonly manager: PresenceExtensionInterface;

	public constructor(runtime: ExtensionRuntime) {
		this.interface = this.manager = createPresenceManager({
			...runtime,
			submitSignal: (message) => {
				runtime.submitAddressedSignal("", message);
			},
		});
	}

	public onNewContext(): void {
		// No-op
	}

	public static readonly extensionId = "dis:bb89f4c0-80fd-4f0c-8469-4f2848ee7f4a";

	public processSignal(
		address: string,
		message: InboundExtensionMessage<SignalMessages>,
		local: boolean,
	): void {
		this.manager.processSignal(address, message, local);
	}
}

// Placeholder to isolate incomplete piece from the rest of the code
function getExtensionStoreFromContainer(_container: IFluidContainer): ContainerExtensionStore {
	throw new Error("getPresence connection to runtime extension store is not implemented yet");
}

/**
 * Acquire an Presence from a Fluid Container
 * @param fluidContainer - Fluid Container to acquire the map from
 * @returns the Presence
 *
 * @alpha
 */
export function getPresence(fluidContainer: IFluidContainer): Presence {
	assert(
		isInternalFluidContainer(fluidContainer),
		0xa2f /* IFluidContainer was not recognized. Only Containers generated by the Fluid Framework are supported. */,
	);

	const presence = getExtensionStoreFromContainer(fluidContainer).acquireExtension(
		ContainerPresenceManager.extensionId,
		ContainerPresenceManager,
	);
	return presence;
}
